{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red199\green221\blue12;\red141\green203\blue226;\red216\green216\blue216;
\red210\green82\blue82;\red191\green164\blue164;\red239\green192\blue144;\red190\green214\blue255;\red121\green171\blue255;
\red255\green198\blue0;\red127\green179\blue71;}
{\*\expandedcolortbl;;\csgenericrgb\c78039\c86667\c4706;\csgenericrgb\c55294\c79608\c88627;\csgenericrgb\c84706\c84706\c84706;
\csgenericrgb\c82353\c32157\c32157;\csgenericrgb\c74902\c64314\c64314;\csgenericrgb\c93725\c75294\c56471;\csgenericrgb\c74510\c83922\c100000;\csgenericrgb\c47451\c67059\c100000;
\csgenericrgb\c100000\c77647\c0;\csgenericrgb\c49804\c70196\c27843;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs22 \cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 /*\cf0 \
\
\cf2   Authors (group members):\cf0 \
\cf2   Email addresses of group members:\cf0 \
\cf2   Group name:\cf0 \
\
\cf2   Course:\cf0 \
\cf2   Section:\cf0 \
\
\cf2   Description of the overall algorithm and key data structures:\cf0 \
\
\
\cf2 */\cf0 \
\
\pard\pardeftab720\partightenfactor0
\cf3 import\cf4  java.io.File;\cf0 \
\cf3 import\cf4  java.io.FileNotFoundException;\cf0 \
\cf3 import\cf4  java.util.*;\cf0 \
\
\
\cf3 public\cf4  \cf3 class\cf4  \cf5 ScrabblePlayer\cf0 \
\pard\pardeftab720\partightenfactor0
\cf4 \{\cf0 \
\cf4     \cf2 //Global fields\cf0 \
\cf4     \cf3 static\cf4  \cf5 ArrayList\cf4 <\cf6 String\cf4 > \cf7 dictionary\cf4 ;\cf0 \
\cf4     \cf3 static\cf4  \cf5 ArrayList\cf4 <\cf6 String\cf4 > \cf7 validWords\cf4  = \cf3 new\cf4  \cf1 ArrayList\cf4 <>();\cf0 \
\cf4     \cf3 public\cf4  \cf3 static\cf4  \cf5 ArrayList\cf4 <\cf6 String\cf4 > \cf7 combinations\cf4  = \cf3 new\cf4  \cf1 ArrayList\cf4 <>();\cf0 \
\cf4     \cf0 \
\cf4     \cf0 \
\cf4     \cf3 public\cf4  \cf3 static\cf4  \cf5 ArrayList\cf4 <\cf6 String\cf4 > \cf7 one\cf4  = \cf3 new\cf4  \cf1 ArrayList\cf4 <>();\cf0 \
\cf4     \cf3 public\cf4  \cf3 static\cf4  \cf5 ArrayList\cf4 <\cf6 String\cf4 > \cf7 two\cf4 = \cf3 new\cf4  \cf1 ArrayList\cf4 <>();\cf0 \
\cf4     \cf3 public\cf4  \cf3 static\cf4  \cf5 ArrayList\cf4 <\cf6 String\cf4 > \cf7 three\cf4  = \cf3 new\cf4  \cf1 ArrayList\cf4 <>();\cf0 \
\cf4     \cf3 public\cf4  \cf3 static\cf4  \cf5 ArrayList\cf4 <\cf6 String\cf4 > \cf7 four\cf4  = \cf3 new\cf4  \cf1 ArrayList\cf4 <>();\cf0 \
\cf4     \cf3 public\cf4  \cf3 static\cf4  \cf5 ArrayList\cf4 <\cf6 String\cf4 > \cf7 five\cf4  = \cf3 new\cf4  \cf1 ArrayList\cf4 <>();\cf0 \
\cf4     \cf3 public\cf4  \cf3 static\cf4  \cf5 ArrayList\cf4 <\cf6 String\cf4 > \cf7 six\cf4 = \cf3 new\cf4  \cf1 ArrayList\cf4 <>();\cf0 \
\cf4     \cf3 public\cf4  \cf3 static\cf4  \cf5 ArrayList\cf4 <\cf6 String\cf4 > \cf7 seven\cf4   = \cf3 new\cf4  \cf1 ArrayList\cf4 <>();\cf0 \
\cf4     \cf3 public\cf4  \cf3 static\cf4  \cf5 ArrayList\cf4 <\cf6 String\cf4 > \cf7 other\cf4   = \cf3 new\cf4  \cf1 ArrayList\cf4 <>();\cf0 \
\
\cf4     \cf0 \
\cf4     \cf0 \
\cf4     \cf0 \
\cf4     \cf0 \
\cf4     \cf2 // initialize ScrabblePlayer with a file of English words\cf0 \
\cf4     \cf3 public\cf4  \cf8 ScrabblePlayer\cf4 (\cf5 String\cf4  \cf9 wordFile\cf4 ) \cf3 throws\cf4  \cf5 FileNotFoundException\cf0 \
\cf4     \{\cf0 \
\cf4         \cf2 //Read in the word file and store the created dictionary in the "dictionary" global field\cf0 \
\cf4         \cf1 @SuppressWarnings\cf4 (\cf10 "resource"\cf4 )\cf0 \
\cf4         \cf5 Scanner\cf4  \cf8 dictFile\cf4  = \cf3 new\cf4  \cf1 Scanner\cf4 (\cf3 new\cf4  \cf1 File\cf4 (\cf9 wordFile\cf4 ));\cf0 \
\cf4         \cf7 dictionary\cf4  = \cf3 new\cf4  \cf1 ArrayList\cf4 <>();\cf0 \
\cf4         \cf3 while\cf4  (\cf9 dictFile\cf4 .\cf1 hasNext\cf4 ()) \{\cf0 \
\cf4             \cf7 dictionary\cf4 .\cf1 add\cf4 (\cf9 dictFile\cf4 .\cf1 nextLine\cf4 ().\cf1 toUpperCase\cf4 ());\cf0 \
\cf4         \}\cf0 \
\cf4         \cf2 //Parse the words\cf0 \
\cf4         \cf8 parseDictionary\cf4 ();\cf0 \
\cf4         \cf5 System\cf4 .\cf7 out\cf4 .\cf1 println\cf4 (\cf7 one\cf4 .\cf1 size\cf4 ());\cf0 \
\cf4         \cf5 System\cf4 .\cf7 out\cf4 .\cf1 println\cf4 (\cf7 two\cf4 .\cf1 size\cf4 ());\cf0 \
\cf4         \cf5 System\cf4 .\cf7 out\cf4 .\cf1 println\cf4 (\cf7 three\cf4 .\cf1 size\cf4 ());\cf0 \
\cf4         \cf5 System\cf4 .\cf7 out\cf4 .\cf1 println\cf4 (\cf7 four\cf4 .\cf1 size\cf4 ());\cf0 \
\cf4         \cf5 System\cf4 .\cf7 out\cf4 .\cf1 println\cf4 (\cf7 five\cf4 .\cf1 size\cf4 ());\cf0 \
\cf4         \cf5 System\cf4 .\cf7 out\cf4 .\cf1 println\cf4 (\cf7 six\cf4 .\cf1 size\cf4 ());\cf0 \
\cf4         \cf5 System\cf4 .\cf7 out\cf4 .\cf1 println\cf4 (\cf7 seven\cf4 .\cf1 size\cf4 ());\cf0 \
\cf4         \cf5 System\cf4 .\cf7 out\cf4 .\cf1 println\cf4 (\cf7 other\cf4 .\cf1 size\cf4 ());\cf0 \
\cf4     \}\cf0 \
\
\cf4     \cf2 // based on the board and available letters, \cf0 \
\cf4     \cf2 //    return a valid word with its location and orientation\cf0 \
\cf4     \cf2 //    See ScrabbleWord.java for details of the ScrabbleWord class \cf0 \
\cf4     \cf2 //\cf0 \
\cf4     \cf2 // board: 15x15 board, each element is an UPPERCASE letter or space;\cf0 \
\cf4     \cf2 //    a letter could be an underscore representing a blank (\ul wildcard\ulnone );\cf0 \
\cf4     \cf2 //    first dimension is row, second dimension is column\cf0 \
\cf4     \cf2 //    \ul ie\ulnone , board[row][\ul col\ulnone ]     \cf0 \
\cf4     \cf2 //    row 0 is the top row; \ul col\ulnone  0 is the leftmost column\cf0 \
\cf4     \cf2 // \cf0 \
\cf4     \cf2 // availableLetters: a char array that has seven letters available\cf0 \
\cf4     \cf2 //    to form a word\cf0 \
\cf4     \cf2 //    a blank (\ul wildcard\ulnone ) is represented using an underscore '_'\cf0 \
\cf4     \cf2 //\cf0 \
\
\cf4     \cf3 public\cf4  \cf5 ScrabbleWord\cf4  \cf8 getScrabbleWord\cf4 (\cf3 char\cf4 [][] \cf9 board\cf4 , \cf3 char\cf4 [] \cf9 availableLetters\cf4 )\cf0 \
\cf4     \{\cf0 \
\cf4         \cf0 \
\cf4         \cf8 practice\cf4 (\cf9 board\cf4 , \cf9 availableLetters\cf4 );\cf0 \
\cf4         \cf0 \
\cf4         \cf3 return\cf4   \cf3 new\cf4  \cf1 ScrabbleWord\cf4 (\cf10 "MYWORD"\cf4 , \cf11 0\cf4 , \cf11 0\cf4 , \cf10 'h'\cf4 );\cf0 \
\cf4     \}\cf0 \
\
\cf4     \cf2 //Gets all combinations of the letters for a certain size\cf0 \
\
\cf4     \cf3 public\cf4  \cf3 static\cf4  \cf3 void\cf4  \cf8 possibleStrings\cf4 (\cf3 int\cf4  \cf9 maxLength\cf4 , \cf3 char\cf4 [] \cf9 alphabet\cf4 , \cf5 String\cf4  \cf9 curr\cf4 ) \{\cf0 \
\
\cf4         \cf2 // If the current string has reached it's maximum length\cf0 \
\cf4         \cf3 if\cf4 (\cf9 curr\cf4 .\cf1 length\cf4 () == \cf9 maxLength\cf4 ) \{\cf0 \
\cf4             \cf7 combinations\cf4 .\cf1 add\cf4 (\cf9 curr\cf4 );\cf0 \
\
\cf4         \cf2 // Else add each letter from the alphabet to new strings and process these new strings again\cf0 \
\cf4         \} \cf3 else\cf4  \{\cf0 \
\cf4             \cf3 for\cf4 (\cf3 int\cf4  \cf8 i\cf4  = \cf11 0\cf4 ; \cf9 i\cf4  < \cf9 alphabet\cf4 .\cf8 length\cf4 ; \cf9 i\cf4 ++) \{\cf0 \
\cf4                 \cf5 String\cf4  \cf8 oldCurr\cf4  = \cf9 curr\cf4 ;\cf0 \
\cf4                 \cf9 curr\cf4  += \cf9 alphabet\cf4 [\cf9 i\cf4 ];\cf0 \
\cf4                 \cf8 possibleStrings\cf4 (\cf9 maxLength\cf4 ,\cf9 alphabet\cf4 ,\cf9 curr\cf4 );\cf0 \
\cf4                 \cf9 curr\cf4  = \cf9 oldCurr\cf4 ;\cf0 \
\cf4             \}\cf0 \
\cf4         \}\cf0 \
\cf4     \}\cf0 \
\cf4     \cf0 \
\cf4     \cf2 //Just to test stuff out called from the getScrabbleWord\cf0 \
\cf4     \cf2 //for time information\cf0 \
\cf4     \cf3 public\cf4  \cf3 static\cf4  \cf3 void\cf4  \cf8 practice\cf4 (\cf3 char\cf4 [][] \cf9 board\cf4 , \cf3 char\cf4 [] \cf9 availableLetters\cf4 ) \{\cf0 \
\cf4         \cf2 //Prints out the 7 \ul availible\ulnone  letters\cf0 \
\cf4         \cf3 for\cf4 (\cf3 int\cf4  \cf8 i\cf4  = \cf11 0\cf4 ; \cf9 i\cf4  < \cf9 availableLetters\cf4 .\cf8 length\cf4 ; \cf9 i\cf4 ++) \{\cf0 \
\cf4             \cf5 System\cf4 .\cf7 out\cf4 .\cf1 print\cf4 (\cf9 availableLetters\cf4 [\cf9 i\cf4 ] + \cf10 " "\cf4 );\cf0 \
\cf4         \}\cf0 \
\cf4         \cf5 System\cf4 .\cf7 out\cf4 .\cf1 println\cf4 ();\cf0 \
\cf4         \cf0 \
\cf4         \cf5 StringBuilder\cf4  \cf8 boardWord\cf4  = \cf3 new\cf4  \cf1 StringBuilder\cf4 ();\cf0 \
\cf4         \cf2 //Goes through the board and gets the word\cf0 \
\cf4         \cf3 for\cf4 (\cf3 int\cf4  \cf8 i\cf4  = \cf11 0\cf4 ; \cf9 i\cf4  < \cf9 board\cf4 .\cf8 length\cf4 ; \cf9 i\cf4 ++) \{\cf0 \
\cf4             \cf3 for\cf4 (\cf3 int\cf4  \cf8 j\cf4  = \cf11 0\cf4 ; \cf9 j\cf4  < \cf9 board\cf4 .\cf8 length\cf4 ; \cf9 j\cf4 ++) \{\cf0 \
\cf4                 \cf2 //System.out.print(board[i][j]);\cf0 \
\cf4                 \cf3 if\cf4 (\cf9 board\cf4 [\cf9 i\cf4 ][\cf9 j\cf4 ]!= \cf10 ' '\cf4 ) \{\cf0 \
\cf4                     \cf9 boardWord\cf4 .\cf1 append\cf4 (\cf9 board\cf4 [\cf9 i\cf4 ][\cf9 j\cf4 ]);\cf0 \
\cf4                 \}\cf0 \
\cf4             \}\cf0 \
\cf4         \}\cf2 //prints the word\cf0 \
\cf4         \cf5 System\cf4 .\cf7 out\cf4 .\cf1 println\cf4 (\cf9 boardWord\cf4 );\cf0 \
\cf4         \cf0 \
\cf4         \cf3 for\cf4 (\cf3 int\cf4  \cf8 i\cf4  = \cf11 1\cf4 ; \cf9 i\cf4 <=\cf11 4\cf4 ; \cf9 i\cf4 ++) \{\cf0 \
\cf4             \cf8 getValidWords\cf4 (\cf9 i\cf4 ,\cf9 availableLetters\cf4 );\cf0 \
\cf4         \}\cf0 \
\cf4         \cf2 //prints valid words and size\cf0 \
\cf4         \cf5 System\cf4 .\cf7 out\cf4 .\cf1 println\cf4 (\cf7 validWords\cf4 .\cf1 toString\cf4 ());\cf0 \
\cf4         \cf5 System\cf4 .\cf7 out\cf4 .\cf1 println\cf4 (\cf7 validWords\cf4 .\cf1 size\cf4 ());\cf0 \
\cf4        \cf0 \
\cf4         \cf2 /*/Prints out the combinations\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2         for(\ul int\ulnone  i = 0; i< combinations.size(); i++) \{\cf0 \
\cf2             System.out.println(combinations.get(i));\cf0 \
\cf2         \}\cf0 \
\cf2         //*/\cf0 \
\pard\pardeftab720\partightenfactor0
\cf4     \}\cf0 \
\
\cf4     \cf0 \
\cf4     \cf3 public\cf4  \cf3 static\cf4  \cf3 void\cf4  \cf8 getValidWords\cf4 (\cf3 int\cf4  \cf9 size\cf4 , \cf3 char\cf4 [] \cf9 availableLetters\cf4 ) \{\cf0 \
\cf4         \cf2 //gets all n letter combinations from the 7 letters\cf0 \
\cf4         \cf2 //possibleStrings(N, availableLetters,"");\cf0 \
\cf4         \cf8 possibleStrings\cf4 (\cf9 size\cf4 , \cf9 availableLetters\cf4 ,\cf10 ""\cf4 );\cf0 \
\cf4         \cf2 //Compares the possible combinations with valid words the adds the valid to list\cf0 \
\cf4         \cf0 \
\cf4         \cf2 //words of size 1\cf0 \
\cf4         \cf3 if\cf4 (\cf9 size\cf4  == \cf11 1\cf4 ) \{\cf0 \
\cf4             \cf3 for\cf4 (\cf3 int\cf4  \cf8 i\cf4  = \cf11 0\cf4 ; \cf9 i\cf4  < \cf7 combinations\cf4 .\cf1 size\cf4 (); \cf9 i\cf4 ++) \{\cf0 \
\cf4                 \cf3 if\cf4 (\cf7 one\cf4 .\cf1 contains\cf4 (\cf7 combinations\cf4 .\cf1 get\cf4 (\cf9 i\cf4 ))) \{\cf0 \
\cf4                     \cf7 validWords\cf4 .\cf1 add\cf4 (\cf7 combinations\cf4 .\cf1 get\cf4 (\cf9 i\cf4 ));\cf0 \
\cf4                 \}\cf0 \
\cf4             \}\cf0 \
\cf4             \cf2 //Resets the combinations\cf0 \
\cf4             \cf7 combinations\cf4  = \cf3 new\cf4  \cf1 ArrayList\cf4 <>();\cf0 \
\cf4         \}\cf0 \
\cf4         \cf2 //words of size 2\cf0 \
\cf4         \cf3 else\cf4  \cf3 if\cf4 (\cf9 size\cf4  == \cf11 2\cf4 ) \{\cf0 \
\cf4             \cf3 for\cf4 (\cf3 int\cf4  \cf8 i\cf4  = \cf11 0\cf4 ; \cf9 i\cf4  < \cf7 combinations\cf4 .\cf1 size\cf4 (); \cf9 i\cf4 ++) \{\cf0 \
\cf4                 \cf3 if\cf4 (\cf7 two\cf4 .\cf1 contains\cf4 (\cf7 combinations\cf4 .\cf1 get\cf4 (\cf9 i\cf4 ))) \{\cf0 \
\cf4                     \cf7 validWords\cf4 .\cf1 add\cf4 (\cf7 combinations\cf4 .\cf1 get\cf4 (\cf9 i\cf4 ));\cf0 \
\cf4                 \}\cf0 \
\cf4             \}\cf0 \
\cf4             \cf2 //Resets the combinations\cf0 \
\cf4             \cf7 combinations\cf4  = \cf3 new\cf4  \cf1 ArrayList\cf4 <>();\cf0 \
\cf4         \}\cf0 \
\cf4         \cf2 //for words of size three\cf0 \
\cf4         \cf3 else\cf4  \cf3 if\cf4 (\cf9 size\cf4  == \cf11 3\cf4 ) \{\cf0 \
\cf4             \cf3 for\cf4 (\cf3 int\cf4  \cf8 i\cf4  = \cf11 0\cf4 ; \cf9 i\cf4  < \cf7 combinations\cf4 .\cf1 size\cf4 (); \cf9 i\cf4 ++) \{\cf0 \
\cf4                 \cf3 if\cf4 (\cf7 three\cf4 .\cf1 contains\cf4 (\cf7 combinations\cf4 .\cf1 get\cf4 (\cf9 i\cf4 ))) \{\cf0 \
\cf4                     \cf7 validWords\cf4 .\cf1 add\cf4 (\cf7 combinations\cf4 .\cf1 get\cf4 (\cf9 i\cf4 ));\cf0 \
\cf4                 \}\cf0 \
\cf4             \}\cf0 \
\cf4             \cf2 //Resets the combinations\cf0 \
\cf4             \cf7 combinations\cf4  = \cf3 new\cf4  \cf1 ArrayList\cf4 <>();\cf0 \
\cf4         \}\cf0 \
\cf4         \cf2 //words of 4\cf0 \
\cf4         \cf3 else\cf4  \cf3 if\cf4 (\cf9 size\cf4  == \cf11 4\cf4 ) \{\cf0 \
\cf4             \cf3 for\cf4 (\cf3 int\cf4  \cf8 i\cf4  = \cf11 0\cf4 ; \cf9 i\cf4  < \cf7 combinations\cf4 .\cf1 size\cf4 (); \cf9 i\cf4 ++) \{\cf0 \
\cf4                 \cf3 if\cf4 (\cf7 four\cf4 .\cf1 contains\cf4 (\cf7 combinations\cf4 .\cf1 get\cf4 (\cf9 i\cf4 ))) \{\cf0 \
\cf4                     \cf7 validWords\cf4 .\cf1 add\cf4 (\cf7 combinations\cf4 .\cf1 get\cf4 (\cf9 i\cf4 ));\cf0 \
\cf4                 \}\cf0 \
\cf4             \}\cf0 \
\cf4             \cf2 //Resets the combinations\cf0 \
\cf4             \cf7 combinations\cf4  = \cf3 new\cf4  \cf1 ArrayList\cf4 <>();\cf0 \
\cf4         \}\cf0 \
\cf4       \cf2 //words of 5\cf0 \
\cf4         \cf3 else\cf4  \cf3 if\cf4 (\cf9 size\cf4  == \cf11 5\cf4 ) \{\cf0 \
\cf4             \cf3 for\cf4 (\cf3 int\cf4  \cf8 i\cf4  = \cf11 0\cf4 ; \cf9 i\cf4  < \cf7 combinations\cf4 .\cf1 size\cf4 (); \cf9 i\cf4 ++) \{\cf0 \
\cf4                 \cf3 if\cf4 (\cf7 five\cf4 .\cf1 contains\cf4 (\cf7 combinations\cf4 .\cf1 get\cf4 (\cf9 i\cf4 ))) \{\cf0 \
\cf4                     \cf7 validWords\cf4 .\cf1 add\cf4 (\cf7 combinations\cf4 .\cf1 get\cf4 (\cf9 i\cf4 ));\cf0 \
\cf4                 \}\cf0 \
\cf4             \}\cf0 \
\cf4             \cf2 //Resets the combinations\cf0 \
\cf4             \cf7 combinations\cf4  = \cf3 new\cf4  \cf1 ArrayList\cf4 <>();\cf0 \
\cf4         \}\cf0 \
\cf4       \cf2 //words of 6\cf0 \
\cf4         \cf3 else\cf4  \cf3 if\cf4 (\cf9 size\cf4  == \cf11 6\cf4 ) \{\cf0 \
\cf4             \cf3 for\cf4 (\cf3 int\cf4  \cf8 i\cf4  = \cf11 0\cf4 ; \cf9 i\cf4  < \cf7 combinations\cf4 .\cf1 size\cf4 (); \cf9 i\cf4 ++) \{\cf0 \
\cf4                 \cf3 if\cf4 (\cf7 six\cf4 .\cf1 contains\cf4 (\cf7 combinations\cf4 .\cf1 get\cf4 (\cf9 i\cf4 ))) \{\cf0 \
\cf4                     \cf7 validWords\cf4 .\cf1 add\cf4 (\cf7 combinations\cf4 .\cf1 get\cf4 (\cf9 i\cf4 ));\cf0 \
\cf4                 \}\cf0 \
\cf4             \}\cf0 \
\cf4             \cf2 //Resets the combinations\cf0 \
\cf4             \cf7 combinations\cf4  = \cf3 new\cf4  \cf1 ArrayList\cf4 <>();\cf0 \
\cf4         \}\cf0 \
\cf4       \cf2 //words of 7\cf0 \
\cf4         \cf3 else\cf4  \cf3 if\cf4 (\cf9 size\cf4  == \cf11 7\cf4 ) \{\cf0 \
\cf4             \cf3 for\cf4 (\cf3 int\cf4  \cf8 i\cf4  = \cf11 0\cf4 ; \cf9 i\cf4  < \cf7 combinations\cf4 .\cf1 size\cf4 (); \cf9 i\cf4 ++) \{\cf0 \
\cf4                 \cf3 if\cf4 (\cf7 seven\cf4 .\cf1 contains\cf4 (\cf7 combinations\cf4 .\cf1 get\cf4 (\cf9 i\cf4 ))) \{\cf0 \
\cf4                     \cf7 validWords\cf4 .\cf1 add\cf4 (\cf7 combinations\cf4 .\cf1 get\cf4 (\cf9 i\cf4 ));\cf0 \
\cf4                 \}\cf0 \
\cf4             \}\cf0 \
\cf4             \cf2 //Resets the combinations\cf0 \
\cf4             \cf7 combinations\cf4  = \cf3 new\cf4  \cf1 ArrayList\cf4 <>();\cf0 \
\cf4         \}\cf0 \
\cf4     \}\cf0 \
\cf4    \cf0 \
\cf4     \cf0 \
\cf4     \cf0 \
\cf4   \cf2 //parses the dictionary into size based arrays\cf0 \
\cf4     \cf3 public\cf4  \cf3 static\cf4  \cf3 void\cf4  \cf8 parseDictionary\cf4 () \{\cf0 \
\cf4         \cf3 int\cf4  \cf8 size\cf4 ;\cf0 \
\cf4         \cf5 String\cf4  \cf8 word\cf4 ;\cf0 \
\cf4         \cf3 for\cf4 (\cf3 int\cf4  \cf8 i\cf4  = \cf11 0\cf4 ; \cf9 i\cf4  < \cf7 dictionary\cf4 .\cf1 size\cf4 (); \cf9 i\cf4 ++) \{\cf0 \
\cf4             \cf9 size\cf4  = \cf7 dictionary\cf4 .\cf1 get\cf4 (\cf9 i\cf4 ).\cf1 length\cf4 ();\cf0 \
\cf4             \cf9 word\cf4  =  \cf7 dictionary\cf4 .\cf1 get\cf4 (\cf9 i\cf4 );\cf0 \
\cf4             \cf3 if\cf4 (\cf9 size\cf4 ==\cf11 1\cf4 ) \{\cf0 \
\cf4                 \cf7 one\cf4 .\cf1 add\cf4 (\cf9 word\cf4 );\cf0 \
\cf4             \} \cf3 else\cf4   \cf3 if\cf4 (\cf9 size\cf4 ==\cf11 2\cf4 ) \{\cf0 \
\cf4                 \cf7 two\cf4 .\cf1 add\cf4 (\cf9 word\cf4 );\cf0 \
\cf4             \} \cf3 else\cf4   \cf3 if\cf4 (\cf9 size\cf4 ==\cf11 3\cf4 ) \{\cf0 \
\cf4                 \cf7 three\cf4 .\cf1 add\cf4 (\cf9 word\cf4 );\cf0 \
\cf4             \} \cf3 else\cf4   \cf3 if\cf4 (\cf9 size\cf4 ==\cf11 4\cf4 ) \{\cf0 \
\cf4                 \cf7 four\cf4 .\cf1 add\cf4 (\cf9 word\cf4 );\cf0 \
\cf4             \} \cf3 else\cf4   \cf3 if\cf4 (\cf9 size\cf4 ==\cf11 5\cf4 ) \{\cf0 \
\cf4                 \cf7 five\cf4 .\cf1 add\cf4 (\cf9 word\cf4 );\cf0 \
\cf4             \} \cf3 else\cf4   \cf3 if\cf4 (\cf9 size\cf4 ==\cf11 6\cf4 ) \{\cf0 \
\cf4                 \cf7 six\cf4 .\cf1 add\cf4 (\cf9 word\cf4 );\cf0 \
\cf4             \} \cf3 else\cf4   \cf3 if\cf4 (\cf9 size\cf4 ==\cf11 7\cf4 ) \{\cf0 \
\cf4                 \cf7 seven\cf4 .\cf1 add\cf4 (\cf9 word\cf4 );\cf0 \
\cf4             \}\cf3 else\cf4  \{\cf0 \
\cf4                 \cf7 other\cf4 .\cf1 add\cf4 (\cf9 word\cf4 );\cf0 \
\cf4             \}\cf0 \
\cf4             \cf0 \
\cf4         \}\cf0 \
\cf4     \}\cf0 \
\cf4     \cf0 \
\
\cf4 \} }